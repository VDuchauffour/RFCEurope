"""
This type stub file was generated by pyright.
"""

"""
// accessors for other abstract interfaces
virtual CvDLLEntityIFaceBase* getEntityIFace() = 0;
virtual CvDLLInterfaceIFaceBase* getInterfaceIFace() = 0;
virtual CvDLLEngineIFaceBase* getEngineIFace() = 0;
virtual CvDLLIniParserIFaceBase* getIniParserIFace() = 0;
virtual CvDLLSymbolIFaceBase* getSymbolIFace() = 0;
virtual CvDLLFeatureIFaceBase* getFeatureIFace() = 0;
virtual CvDLLRouteIFaceBase* getRouteIFace() = 0;
virtual CvDLLPlotBuilderIFaceBase* getPlotBuilderIFace() = 0;
virtual CvDLLRiverIFaceBase* getRiverIFace() = 0;
virtual CvDLLFAStarIFaceBase* getFAStarIFace() = 0;
virtual CvDLLXmlIFaceBase* getXMLIFace() = 0;
virtual CvDLLFlagEntityIFaceBase* getFlagEntityIFace() = 0;
virtual CvDLLPythonIFaceBase* getPythonIFace() = 0;

virtual void delMem(void *p) = 0;
virtual void* newMem(size_t size) = 0;

virtual void delMem(void *p, const char* pcFile, int iLine) = 0;
virtual void* newMem(size_t size, const char* pcFile, int iLine) = 0;

virtual void delMemArray(void *p, const char* pcFile, int iLine) = 0;
virtual void* newMemArray(size_t size, const char* pcFile, int iLine) = 0;

virtual void* reallocMem(void* a, unsigned int uiBytes, const char* pcFile, int iLine) = 0;
virtual unsigned int memSize(void* a) = 0;

virtual void clearVector(std::vector<int>& vec) = 0;
virtual void clearVector(std::vector<byte>& vec) = 0;
virtual void clearVector(std::vector<float>& vec) = 0;
"""

def getAssignedNetworkID(iPlayerID): ...
def isConnected(iNetID): ...
def isGameActive(): ...
def GetLocalNetworkID(): ...
def GetSyncOOS(iNetID): ...
def GetOptionsOOS(iNetID): ...
def GetLastPing(iNetID): ...
def IsModem(): ...
def SetModem(bModem): ...
def AcceptBuddy(szName, iRequestID): ...
def RejectBuddy(szName, iRequestID): ...
def messageControlLog(s): ...
def getChtLvl(): ...
def setChtLvl(iLevel): ...
def GetWorldBuilderMode(): ...
def getCurrentLanguage(): ...
def setCurrentLanguage(iNewLanguage): ...
def isModularXMLLoading(): ...
def IsPitbossHost(): ...
def GetPitbossSmtpHost(): ...
def GetPitbossSmtpLogin(): ...
def GetPitbossSmtpPassword(): ...
def GetPitbossEmail(): ...
def sendMessageData(pData): ...
def sendPlayerInfo(eActivePlayer): ...
def sendGameInfo(szGameName, szAdminPassword): ...
def sendPlayerOption(eOption, bValue): ...
def sendChat(szChatString, eTarget): ...
def sendPause(iPauseID): ...
def sendMPRetire(): ...
def sendToggleTradeMessage(eWho, eItemType, iData, iOtherWho, bAIOffer, bSendToAll): ...
def sendClearTableMessage(eWhoTradingWith): ...
def sendContactCiv(eContactType, eWho): ...
def sendOffer(): ...
def sendDiploEvent(eWhoTradingWith, eDiploEvent, iData1, iData2): ...
def sendRenegotiate(eWhoTradingWith): ...
def sendRenegotiateThisItem(ePlayer2, eItemType, iData): ...
def sendExitTrade(): ...
def sendKillDeal(iDealID, bFromDiplomacy): ...
def sendDiplomacy(ePlayer, pParams): ...
def sendPopup(ePlayer, pInfo): ...
def getMillisecsPerTurn(): ...
def getSecsPerTurn(): ...
def getTurnsPerSecond(): ...
def getTurnsPerMinute(): ...
def openSlot(eID): ...
def closeSlot(eID): ...
def getMapScriptName(): ...
def getTransferredMap(): ...
def isDescFileName(szFileName): ...
def isWBMapScript(): ...
def isWBMapNoPlayers(): ...
def pythonMapExists(szMapName): ...
def stripSpecialCharacters(szName): ...
def initGlobals(): ...
def uninitGlobals(): ...
def callUpdater(): ...
def NiTextOut(szText): ...
def MessageBox(szText, szCaption): ...
def SetDone(bDone): ...
def GetDone(): ...
def GetAutorun(): ...
def beginDiplomacy(pDiploParams, ePlayer): ...
def endDiplomacy(): ...
def isDiplomacy(): ...
def getDiplomacyPlayer(): ...
def updateDiplomacyAttitude(bForce): ...
def isMPDiplomacy(): ...
def isMPDiplomacyScreenUp(): ...
def getMPDiplomacyPlayer(): ...
def beginMPDiplomacy(eWhoTalkingTo, bRenegotiate, bSimultaneous): ...
def endMPDiplomacy(): ...
def getAudioDisabled(): ...
def getAudioTagIndex(szTag, iScriptType): ...
def DoSound(iScriptId): ...
def Do3DSound(iScriptId, vPosition): ...
def logMsg(pLogFileName, pBuf, bWriteToConsole, bTimeStamp): ...
def logMemState(msg): ...
